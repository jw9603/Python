# 백준 4949. 균형잡힌 세상
# https://www.acmicpc.net/problem/4949
####################################### 문제 이해 #######################################
# 어떤 문자열이 주어졌을 때, 괄호들의 균형이잘 맞춰져 있는지 판단하는 프로그램을 짜는 것이다.
# 문자열에 포함되는 괄호는 소괄호와 대괄호로 2종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.
# 1. 모든 왼쪽 소괄호는 오른쪽 소괄호와만 짝
# 2. 모든 왼쪽 대괄호는 오른쪽 대괄호와만 짝
# 3. 모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재
# 4. 모든 괄호들의 짝은 1대1 매칭

# 입력:
# 여러 줄의 문자열이 주어지고, 각 문자열은 마지막 글자를 제외하고 영문 알파벳, 공백, 소괄호, 대괄호로 이루어ㅕㅈ 있다.
# 온점으로 끝난다.
# 입력의 종료조건으로 맨 마지막에 온점 하나가 들어온다.
# 출력: 각 줄마다 해당 문자열이 균형을 이루고 있으면 "yes", 그렇지 않으면 "no"를 출력한다.
# 알고리즘:
# 1. 일단 무한 루프에서 입력을 받는다. 왜냐하면 입력의 종료조건 전까지는 계속 수행되기 때문.
#    그리고 공백도 있다. 
# 2. 온점이 들어오면 break로 루프 탈출
# 3. 스택을 선언
# 4. 문자열을 순회하면서 왼쪽 소, 대 괄호가 들어오면 스택에 넣고,
#    오른쪽 소, 대 괄호가 들어오면 스택에서 짝이 맞는지 확인한다.
#    이 때, 스택이 비어있거나 스택의 마지막 원소가 열린괄호가 아니면 균형이 맞지 않은것!
# 5. 스택이 비어있으면 균형이 맞는 것이고, 비어있지 않으면 균형이 맞
######################################### 문제 이해 #######################################
def main():
    while True:
        text = input().rstrip()

        if text == '.':
            break
            
        stack = []
        flag = True
        for char in text:
            if char == '(' or char == '[':
                stack.append(char)
            elif char == ')':
                if not stack or stack[-1] == '[':
                    flag = False
                    break
                stack.pop()
            elif char == ']':
                if not stack or stack[-1] == '(':
                    flag = False
                    break
                stack.pop()
    
        print('yes' if not stack and flag else 'no')

if __name__ == "__main__":
    main()     