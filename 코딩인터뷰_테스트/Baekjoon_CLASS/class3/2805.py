# 백준 2805. 나무 자르기
# https://www.acmicpc.net/problem/2805
####################################### 문제 이해 #######################################
# 상근이는 나무 M미터가 필요하다. 근처에 나무를 구입할 곳이 모두 망해버렸기 때문에, 정부에 벌목 허가를 요청했다.
# 목재절단기를 이용해서 나무를 구할것이다.
# 목재절단기는 다음과 같이 동작한다. 먼저, 상근이는 절단기에 높이 H를 지정해야 한다.
# 따라서, 높이가 H보다 큰 나무는 H위의 부분이 잘릴 것이고, 낮은 나무는 잘리지 않을 것이다.

# 예를 들어, 한 줄에 연속해있는 나무의 높이가 20, 15, 10, 17이라고 하자. 
# H를 15로 지정했다면, 나무를 자른 뒤의 높이는 15, 15, 10, 15가 될 것이고, 상근이는
# 길이가 5, 2인 나무를 집에들고간다.(총 7미터) -> 20 - 15, 17 - 15

# 상근이는 환경에 매우 관심이 많기 때문에, 나무를 필요한 만큼만 집으로 가져가려고 한다.
# 이때, 적어도 M미터의 나무를 집에 가져가기 위해서 절단기에 설정할 수 있는 높이의 최댓값을 구해라.

# 입력:
# 첫재 줄에 나무의 수 N과 상근이가 집으로 가져가려고 하는 나무의 길이 M이 주어진다.
# 1 <= N <= 10^6, 1 <= M <= 2 * 10^9
# 둘째 줄에는 나무의 높이가 주어진다. 나무의 높이의 합은 항상 M보다 크거나 같기 때문에, 상근이는 집에 필요한 나무를
# 항상 가져갈 수 있다.

# 출력: 적어도 M미터의 나무를 집에 가져가기 위해서 절단기에 설정할 수 있는 높이의 최댓값을 출력한다.

# 알고리즘:
# 최소 M미터 이상의 나무를 챙겨가기 위해 설정하는 높이 H의 최댓값을 구해야 하는 문제이다.
# 나무의 수와 길이의 범위가 매우 매우 크다. 뭐겠냐? 바로 이진 탐색을 구해야 한다.
# 이진 탐색을 통해 탐색해야 하는 것은 높이 H이고, 그렇게 해서 설정된 H를 기반으로 있는 나무를
# 순회하여 몇 미터의 나무를 챙겨갈 수 있는지 확인한다.
####################################### 문제 이해 #######################################
def sol(M, heights):
    left, right = 0, max(heights)
    result = 0

    while left <= right:
        mid = (left + right) // 2
        h_cnt = 0
        for height in heights:
            h_cnt += max(0, height - mid)
        
        if h_cnt >= M:
            result = mid
            left = mid + 1
        
        else:
            right = mid - 1
    
    return result

def main():
    N, M = map(int, input().split())
    heights = list(map(int, input().split()))
    print(sol(M, heights))

if __name__ == '__main__':
    main()