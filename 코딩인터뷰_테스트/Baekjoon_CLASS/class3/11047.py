# 백준 11047. 동전 0
# https://www.acmicpc.net/problem/11047
#################################### 문제 이해 ####################################
# 준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.
# 동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이 때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성

# 입력: 
# 첫째 줄에 N과 K가 주어진다.
# 둘째 줄부터 N개의 줄에 동전의 가치 A_i가 오름차순으로 주어진다.
# Ai = 1, i >= 2인 경우에 A_i는 A_{i - 1}의 배수
# 출력: 첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력

# 알고리즘:
# 어? 주어지는 동전들은 서로 배수 관계이다. 
# 그렇기 때문에 큰 동전부터 갯수를 확인하면 된다. 즉, 그리디 알고리즘
#################################### 문제 이해 ####################################
def sol(N, K, coins):
    cnt = 0

    for i in range(N - 1, -1, -1):
        cnt += K // coins[i]
        K %= coins[i]
    
    return cnt

def main():
    N, K = map(int, input().split())
    coins = [int(input().strip()) for _ in range(N)]

    print(sol(N, K, coins))

if __name__ == '__main__':
    main()